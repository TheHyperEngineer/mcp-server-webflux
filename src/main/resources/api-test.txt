#!/usr/bin/env bash
set -euo pipefail

BASE="http://localhost:8080"
JQ="${JQ:-jq}"

echo "Using base URL: $BASE"
echo

# Sample constants (replace with actual IDs present in your DB if needed)
SAMPLE_PATIENT_ID="11111111-1111-1111-1111-111111111111"
ANOTHER_PATIENT_ID="22222222-2222-2222-2222-222222222222"
SAMPLE_TEST="HbA1c"
SAMPLE_TEST2="Lipid Panel"
SAMPLE_DISEASE="Type 2 Diabetes"
ISO_NOW="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
ISO_6M_AGO="$(date -u -d '-6 months' +"%Y-%m-%dT%H:%M:%SZ")"
ISO_START="2024-01-01T00:00:00Z"
ISO_END="2024-12-31T23:59:59Z"

echo "1) TestController - GET /api/test"
curl -sS "${BASE}/api/test" | ${JQ:-cat}
echo -e "\n---\n"

echo "2) Patient endpoints"
echo "2.1) GET /api/patients/{id}/tests/count"
curl -sS "${BASE}/api/patients/${SAMPLE_PATIENT_ID}/tests/count" | ${JQ:-cat}
echo -e "\n---\n"

echo "2.2) GET /api/patients/{id}/tests"
curl -sS "${BASE}/api/patients/${SAMPLE_PATIENT_ID}/tests" | ${JQ:-cat}
echo -e "\n---\n"

echo "2.3) GET /api/patients/{id}/profile"
curl -sS "${BASE}/api/patients/${SAMPLE_PATIENT_ID}/profile" | ${JQ:-cat}
echo -e "\n---\n"

echo "2.4) GET /api/patients/no-tests-since?since={ISO}"
curl -sS "${BASE}/api/patients/no-tests-since?since=${ISO_6M_AGO}" | ${JQ:-cat}
echo -e "\n---\n"

echo "2.5) GET /api/patients/{id}/most-recent-test"
curl -sS "${BASE}/api/patients/${SAMPLE_PATIENT_ID}/most-recent-test" | ${JQ:-cat}
echo -e "\n---\n"

echo "2.6) GET /api/patients/overdue-for-test?testName=&asOf="
curl -sS "${BASE}/api/patients/overdue-for-test?testName=${SAMPLE_TEST}&asOf=${ISO_NOW}" | ${JQ:-cat}
echo -e "\n---\n"

echo "2.7) GET /api/patients/by-disease-count"
curl -sS "${BASE}/api/patients/by-disease-count" | ${JQ:-cat}
echo -e "\n---\n"

echo "2.8) GET /api/patients/disease-test-mix?disease=&tests=csv"
# Provide tests as CSV encoded list in query param or multiple params; controller expects List<String> tests query param
# Use tests repeated: tests=HbA1c&tests=Lipid%20Panel
curl -sS "${BASE}/api/patients/disease-test-mix?disease=$(printf "%s" "${SAMPLE_DISEASE}" | jq -s -R -r @uri)&tests=$(printf "%s" "${SAMPLE_TEST}" | jq -s -R -r @uri)&tests=$(printf "%s" "${SAMPLE_TEST2}" | jq -s -R -r @uri)" | ${JQ:-cat}
echo -e "\n---\n"

echo "2.9) GET /api/patients/coverage"
curl -sS "${BASE}/api/patients/coverage" | ${JQ:-cat}
echo -e "\n---\n"

echo "3) Disease endpoints"
echo "3.1) GET /api/diseases/{disease}/patients"
curl -sS "${BASE}/api/diseases/$(printf "%s" "${SAMPLE_DISEASE}" | jq -s -R -r @uri)/patients" | ${JQ:-cat}
echo -e "\n---\n"

echo "3.2) GET /api/diseases/distribution"
curl -sS "${BASE}/api/diseases/distribution" | ${JQ:-cat}
echo -e "\n---\n"

echo "3.3) GET /api/diseases/{disease}/compliance?asOf="
curl -sS "${BASE}/api/diseases/$(printf "%s" "${SAMPLE_DISEASE}" | jq -s -R -r @uri)/compliance?asOf=${ISO_NOW}" | ${JQ:-cat}
echo -e "\n---\n"

echo "3.4) GET /api/diseases/comorbidity-patterns"
curl -sS "${BASE}/api/diseases/comorbidity-patterns" | ${JQ:-cat}
echo -e "\n---\n"

echo "3.5) GET /api/diseases/rank-by-count"
curl -sS "${BASE}/api/diseases/rank-by-count" | ${JQ:-cat}
echo -e "\n---\n"

echo "4) Test endpoints"
echo "4.1) GET /api/tests/{testName}/patients"
curl -sS "${BASE}/api/tests/$(printf "%s" "${SAMPLE_TEST}" | jq -s -R -r @uri)/patients" | ${JQ:-cat}
echo -e "\n---\n"

echo "4.2) GET /api/tests/{testName}/utilization?start=&end="
curl -sS "${BASE}/api/tests/$(printf "%s" "${SAMPLE_TEST}" | jq -s -R -r @uri)/utilization?start=${ISO_START}&end=${ISO_END}" | ${JQ:-cat}
echo -e "\n---\n"

echo "4.3) GET /api/tests/{testName}/intervals"
curl -sS "${BASE}/api/tests/$(printf "%s" "${SAMPLE_TEST}" | jq -s -R -r @uri)/intervals" | ${JQ:-cat}
echo -e "\n---\n"

echo "4.4) GET /api/tests/{testName}/unusually-frequent?thresholdDays="
curl -sS "${BASE}/api/tests/$(printf "%s" "${SAMPLE_TEST}" | jq -s -R -r @uri)/unusually-frequent?thresholdDays=30" | ${JQ:-cat}
echo -e "\n---\n"

echo "4.5) GET /api/tests/low-usage?asOf="
curl -sS "${BASE}/api/tests/low-usage?asOf=${ISO_NOW}" | ${JQ:-cat}
echo -e "\n---\n"

echo "5) Util endpoints"
echo "5.1) GET /api/util/overdue-alerts?asOf="
curl -sS "${BASE}/api/util/overdue-alerts?asOf=${ISO_NOW}" | ${JQ:-cat}
echo -e "\n---\n"

echo "5.2) POST /api/util/trend    -> payload: { testName, period, start, end }"
curl -sS -X POST "${BASE}/api/util/trend" \
  -H "Content-Type: application/json" \
  -d @- <<JSON | ${JQ:-cat}
{"testName":"${SAMPLE_TEST}","period":"monthly","start":"${ISO_START}","end":"${ISO_END}"}
JSON
echo -e "\n---\n"

echo "5.3) POST /api/util/cohort-retention -> payload example"
curl -sS -X POST "${BASE}/api/util/cohort-retention" \
  -H "Content-Type: application/json" \
  -d @- <<JSON | ${JQ:-cat}
{
  "cohortDefinition": { "disease": "${SAMPLE_DISEASE}" },
  "testName": "${SAMPLE_TEST}",
  "intervals": [3,6,12]
}
JSON
echo -e "\n---\n"

echo "5.4) GET /api/util/time-to-first-test?disease=&testName="
curl -sS "${BASE}/api/util/time-to-first-test?disease=$(printf "%s" "${SAMPLE_DISEASE}" | jq -s -R -r @uri)&testName=$(printf "%s" "${SAMPLE_TEST}" | jq -s -R -r @uri)" | ${JQ:-cat}
echo -e "\n---\n"

echo "5.5) GET /api/util/data-health?asOf=&sampleSize="
curl -sS "${BASE}/api/util/data-health?asOf=${ISO_NOW}&sampleSize=50" | ${JQ:-cat}
echo -e "\n---\n"

echo "6) Analytics endpoints (POSTs)"
echo "6.1) POST /api/analytics/feature-table"
curl -sS -X POST "${BASE}/api/analytics/feature-table" \
  -H "Content-Type: application/json" \
  -d @- <<JSON | ${JQ:-cat}
{
  "windowMonths": 12,
  "features": ["${SAMPLE_TEST}_count_12m", "days_since_last_${SAMPLE_TEST}"]
}
JSON
echo -e "\n---\n"

echo "6.2) POST /api/analytics/survival-inputs"
curl -sS -X POST "${BASE}/api/analytics/survival-inputs" -H "Content-Type: application/json" -d '{}' | ${JQ:-cat}
echo -e "\n---\n"

echo "6.3) POST /api/analytics/cluster"
curl -sS -X POST "${BASE}/api/analytics/cluster" -H "Content-Type: application/json" -d '{}' | ${JQ:-cat}
echo -e "\n---\n"

echo "6.4) POST /api/analytics/predict-missed-test"
curl -sS -X POST "${BASE}/api/analytics/predict-missed-test" -H "Content-Type: application/json" -d '{}' | ${JQ:-cat}
echo -e "\n---\n"

echo "6.5) POST /api/analytics/export-csv"
curl -sS -X POST "${BASE}/api/analytics/export-csv" -H "Content-Type: application/json" -d '{"columns":["id","name"], "filters":{}}' | ${JQ:-cat}
echo -e "\n---\n"

echo "7) Report endpoint"
echo "7.1) GET /api/report/kpis?asOf="
curl -sS "${BASE}/api/report/kpis?asOf=${ISO_NOW}" | ${JQ:-cat}
echo -e "\n---\n"

echo "8) Forecast endpoint"
echo "8.1) POST /api/forecast/capacity"
curl -sS -X POST "${BASE}/api/forecast/capacity" \
  -H "Content-Type: application/json" \
  -d @- <<JSON | ${JQ:-cat}
{
  "testName": "${SAMPLE_TEST}",
  "horizonMonths": 6,
  "method": "linear"
}
JSON
echo -e "\n---\n"

echo "9) Export endpoint"
echo "9.1) POST /api/export/patients"
curl -sS -X POST "${BASE}/api/export/patients" -H "Content-Type: application/json" -d '{"filters": {"disease":"Type 2 Diabetes"}, "columns":["id","name"]}' | ${JQ:-cat}
echo -e "\n---\n"

echo "10) Audit endpoint"
echo "10.1) GET /api/audit/patient/{id}/trail"
curl -sS "${BASE}/api/audit/patient/${SAMPLE_PATIENT_ID}/trail" | ${JQ:-cat}
echo -e "\n---\n"

echo "Script finished. If any responses are empty, verify the DB seed data contains matching sample IDs/names."